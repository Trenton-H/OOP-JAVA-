#BlueJ class context
comment0.target=HardwareStore
comment0.text=\r\n\ This\ class\ is\ used\ to\ represent\ a\ database\ interface\ for\ a\ list\ of\r\n\ <CODE>item</CODE>'s.\ It\ using\ a\ plain-text\ file\ "database.txt"\ to\ store\ and\r\n\ write\ item\ objects\ in\ readable\ text\ form.\ It\ contains\ an\r\n\ <CODE>ArrayList</CODE>\ called\ <CODE>itemList</CODE>\ to\ store\ the\ database\ in\r\n\ a\ runtime\ friendly\ data\ structure.\ The\ <CODE>itemList</CODE>\ is\ written\ to\r\n\ "database.txt"\ at\ the\ end\ of\ the\ <CODE>HardwareStore</CODE>\ object's\ life\ by\r\n\ calling\ <CODE>writeDatabase()</CODE>.\ This\ class\ also\ provides\ methods\ for\r\n\ adding,\ removing,\ and\ searching\ for\ items\ in\ the\ list.\r\n\r\n\ @author\ Junye\ Wen\r\n
comment1.params=
comment1.target=HardwareStore()
comment1.text=\r\n\ This\ constructor\ creates\ an\ empty\ ArrayList\ and\ then\ calls\ the\ \r\n\ <CODE>readDatabase()</CODE>\ method\ to\ populate\ items\ previously\ stored.\ \r\n\r\n\ @throws\ IOException\r\n
comment10.params=firstName\ lastName\ phoneNumber\ address
comment10.target=void\ addCustomer(java.lang.String,\ java.lang.String,\ java.lang.String,\ java.lang.String)
comment10.text=\r\n\ @param\ firstName\ a\ <CODE>String</CODE>\ representing\ the\ first\ name\ of\ user\r\n\ @param\ lastName\ a\ <CODE>String</CODE>\ representing\ the\ last\ name\ of\ user\r\n\ @param\ phoneNumber\ a\ <CODE>String</CODE>\ representing\ the\ telephone\ number\ of\ user\r\n\ @param\ address\ a\ <CODE>String</CODE>\ representing\ the\ address\ of\ user\r\n
comment11.params=firstName\ lastName\ ssn\ monthlySalary
comment11.target=void\ addEmployee(java.lang.String,\ java.lang.String,\ int,\ float)
comment11.text=\r\n\ @param\ firstName\ a\ <CODE>String</CODE>\ representing\ the\ first\ name\ of\ user\r\n\ @param\ lastName\ a\ <CODE>String</CODE>\ representing\ the\ last\ name\ of\ user\r\n\ @param\ ssn\ an\ <CODE>int</CODE>\ representing\ the\ ssn\ of\ user\r\n\ @param\ monthlySalary\ a\ <CODE>float</CODE>\ representing\ the\ monthly\ salary\ of\ user\r\n
comment12.params=itemIndex\ quantity
comment12.target=void\ addQuantity(int,\ int)
comment12.text=\r\n\ Add\ a\ certain\ quantity\ of\ the\ given\ item\ index.\r\n\ Preconditions\:\ 1.\ Item\ exists.\r\n\ @param\ itemIndex\ the\ index\ of\ the\ item\ in\ the\ itemList\r\n\ @param\ quantity\ \ the\ quantity\ to\ add\r\n
comment13.params=itemIndex\ quantity
comment13.target=void\ removeQuantity(int,\ int)
comment13.text=\r\n\ Removes\ a\ certain\ quantity\ of\ the\ given\ item\ index.\ \r\n\ Preconditions\:\ 1.\ Item\ exists.\ 2.\ Quantity\ to\ remove\ smaller\ than\ current\ quantity.\r\n\ @param\ itemIndex\ the\ index\ of\ the\ item\ in\ the\ itemList\r\n\ @param\ quantity\ \ the\ quantity\ to\ remove\r\n
comment14.params=name
comment14.target=java.lang.String\ getMatchingItemsByName(java.lang.String)
comment14.text=\r\n\ Returns\ all\ the\ items\ that\ (partially)\ match\ the\ given\ name.\r\n\ @param\ name\ the\ name\ to\ match.\r\n\ @return\ a\ string\ containing\ a\ table\ of\ the\ matching\ items.\r\n
comment15.params=quantity
comment15.target=java.lang.String\ getMatchingItemsByQuantity(int)
comment15.text=\r\n\ Returns\ all\ the\ items\ with\ current\ quantity\ lower\ than\ (or\ equal)\ the\r\n\ given\ threshold.\r\n\ @param\ quantity\ the\ quantity\ threshold.\r\n\ @return\ a\ string\ containing\ a\ table\ of\ the\ matching\ items.\r\n
comment16.params=id
comment16.target=Item\ findItem(java.lang.String)
comment16.text=\r\n\ This\ method\ can\ be\ used\ to\ find\ a\ item\ in\ the\ Arraylist\ of\ items.\r\n\r\n\ @param\ id\ a\ <CODE>String</CODE>\ that\ represents\ the\ ID\ of\r\n\ the\ item\ that\ to\ be\ searched\ for.\r\n\ @return\ the\ <CODE>Item</CODE>\ in\ the\ Arraylist\ of\r\n\ items,\ or\ null\ if\ the\ search\ failed.\r\n
comment17.params=idNumber
comment17.target=int\ findItemIndex(java.lang.String)
comment17.text=\r\n\ This\ method\ can\ be\ used\ to\ find\ a\ item\ in\ the\ Arraylist\ of\ items.\r\n\r\n\ @param\ idNumber\ a\ <CODE>String</CODE>\ that\ represents\ the\ ID\ number\ of\r\n\ the\ item\ that\ to\ be\ searched\ for.\r\n\ @return\ the\ <CODE>int</CODE>\ index\ of\ the\ items\ in\ the\ Arraylist\ of\r\n\ items,\ or\ -1\ if\ the\ search\ failed.\r\n
comment18.params=id
comment18.target=User\ findUser(int)
comment18.text=\r\n\ This\ method\ can\ be\ used\ to\ find\ a\ user\ in\ the\ Arraylist\ of\ users.\r\n\r\n\ @param\ id\ an\ <CODE>int</CODE>\ that\ represents\ the\ ID\ of\r\n\ the\ user\ that\ to\ be\ searched\ for.\r\n\ @return\ the\ <CODE>User</CODE>\ in\ the\ Arraylist\ of\r\n\ users,\ or\ null\ if\ the\ search\ failed.\r\n
comment19.params=id
comment19.target=int\ findUserIndex(int)
comment19.text=\r\n\ This\ method\ can\ be\ used\ to\ find\ the\ index\ of\ user\ in\ the\ Arraylist\ of\ users.\r\n\r\n\ @param\ id\ a\ <CODE>String</CODE>\ that\ represents\ the\ ID\ of\r\n\ the\ user\ that\ to\ be\ searched\ for.\r\n\ @return\ the\ <CODE>int</CODE>\ index\ of\ the\ user\ in\ the\ Arraylist\ of\r\n\ users,\ or\ -1\ if\ the\ search\ failed.\r\n
comment2.params=
comment2.target=java.lang.String\ getAllItemsFormatted()
comment2.text=\r\n\ Method\ getAllItemsFormatted\ returns\ the\ current\ list\ of\ items\ in\ the\ Arraylist\ in\r\n\ no\ particular\ order.\r\n\ \r\n\ @return\ a\ formatted\ String\ representation\ of\ all\ the\ items\ in\ itemList.\r\n
comment20.params=idInput\ firstName\ lastName\ phoneNumber\ address
comment20.target=void\ editCustomerInformation(int,\ java.lang.String,\ java.lang.String,\ java.lang.String,\ java.lang.String)
comment20.text=\r\n\ This\ method\ will\ edit\ information\ of\ an\ customer.\r\n\ It\ will\ first\ remove\ the\ old\ entry\ and\ add\ a\ new\ one\ with\ same\ user\ ID\r\n\ @param\ idInput\ the\ <CODE>int</CODE>\ index\ of\ the\ user's\ ID\r\n\ @param\ firstName\ a\ <CODE>String</CODE>\ representing\ the\ first\ name\ of\ user\r\n\ @param\ lastName\ a\ <CODE>String</CODE>\ representing\ the\ last\ name\ of\ user\r\n\ @param\ phoneNumber\ a\ <CODE>String</CODE>\ representing\ the\ telephone\ number\ of\ user\r\n\ @param\ address\ a\ <CODE>String</CODE>\ representing\ the\ address\ of\ user\r\n
comment21.params=idInput\ firstName\ lastName\ socialSecurityNumber\ monthlySalary
comment21.target=void\ editEmployeeInformation(int,\ java.lang.String,\ java.lang.String,\ int,\ float)
comment21.text=\r\n\ This\ method\ will\ edit\ information\ of\ an\ employee.\r\n\ It\ will\ first\ remove\ the\ old\ entry\ and\ add\ a\ new\ one\ with\ same\ user\ ID\r\n\ @param\ idInput\ the\ <CODE>int</CODE>\ index\ of\ the\ user's\ ID\r\n\ @param\ firstName\ a\ <CODE>String</CODE>\ representing\ the\ first\ name\ of\ user\r\n\ @param\ lastName\ a\ <CODE>String</CODE>\ representing\ the\ last\ name\ of\ user\r\n\ @param\ socialSecurityNumber\ an\ <CODE>int</CODE>\ representing\ the\ ssn\ of\ user\r\n\ @param\ monthlySalary\ a\ <CODE>float</CODE>\ representing\ the\ monthly\ salary\ of\ user\r\n
comment22.params=itemIndex
comment22.target=void\ removeItem(int)
comment22.text=\r\n\ This\ method\ can\ be\ used\ to\ remove\ a\ item\ in\ the\ Arraylist\ of\ items.\r\n\r\n\ @param\ itemIndex\ an\ <CODE>int</CODE>\ that\ represents\ the\ Index\ of\r\n\ the\ item\ in\ the\ list\ that\ to\ be\ removed.\r\n
comment23.params=i
comment23.target=Item\ getItem(int)
comment23.text=\r\n\ This\ method\ is\ used\ to\ retrieve\ the\ Item\ object\ from\ the\r\n\ <CODE>itemList</CODE>\ at\ a\ given\ index.\r\n\r\n\ @param\ i\ the\ index\ of\ the\ desired\ <CODE>Item</CODE>\ object.\r\n\ @return\ the\ <CODE>Item</CODE>\ object\ at\ the\ index\ or\ null\ if\ the\ index\ is\r\n\ invalid.\r\n
comment24.params=itemId\ saleQuantity\ customerId\ employeeId\ itemIndex
comment24.target=void\ progressTransaction(java.lang.String,\ int,\ int,\ int,\ int)
comment24.text=\r\n\ This\ method\ will\ add\ a\ transaction\ to\ the\ list,\ and\ remove\ the\ quantity\ for\ the\ target\ item.\r\n\ @param\ itemId\ a\ <CODE>String</CODE>\ representing\ the\ ID\ of\ item\r\n\ @param\ saleQuantity\ an\ <CODE>int</CODE>\ of\ the\ quantity\r\n\ @param\ customerId\ an\ <CODE>int</CODE>\ representing\ the\ ID\ of\ customer\r\n\ @param\ employeeId\ an\ <CODE>int</CODE>\ representing\ the\ ID\ of\ employee\r\n\ @param\ itemIndex\ an\ <CODE>int</CODE>\ representing\ the\ index\ of\ item\ in\ the\ list,\ used\ to\ reduce\ the\ quantity.\r\n
comment25.params=
comment25.target=void\ writeDatabase()
comment25.text=\r\n\ This\ method\ opens\ the\ database\ file\ and\ overwrites\ it\ with\ a\r\n\ serialized\ representation\ of\ all\ the\ items\ in\ the\ <CODE>itemList</CODE>,\r\n\ all\ users\ in\ the\ <CODE>userList</CODE>,\ all\ transactions\ in\ the\r\n\ <CODE>transactionList</CODE>,\ and\ the\ <CODE>userIdCounter</CODE>.\r\n\ This\ should\ be\ the\ last\ method\ to\ be\ called\ before\ exiting\ the\ program.\r\n\r\n\ @throws\ IOException\r\n
comment26.params=
comment26.target=void\ readDatabase()
comment26.text=\r\n\ The\ method\ opens\ the\ database\ file\ and\ initializes\ the\ <CODE>itemList</CODE>,\r\n\ <CODE>userList</CODE>,\ <CODE>transactionList</CODE>\ and\ the\ <CODE>userIdCounter</CODE>\r\n\ with\ their\ contents.\ If\ no\ such\ file\ exists,\ then\ one\ is\ created.\r\n\ The\ contents\ of\ the\ file\ are\ "loaded"\ into\ the\ itemList\ ArrayList\ in\ no\ \r\n\ particular\ order.\ The\ file\ is\ then\ closed\ during\ the\ duration\ of\ the\ \r\n\ program\ until\ <CODE>writeDatabase()</CODE>\ is\ called.\r\n\r\n\ @throws\ IOException\r\n
comment27.params=c
comment27.target=void\ close(java.io.Closeable)
comment27.text=\r\n\ Auxiliary\ convenience\ method\ used\ to\ close\ a\ file\ and\ handle\ possible\r\n\ exceptions\ that\ may\ occur.\r\n\r\n\ @param\ c\r\n
comment28.params=
comment28.target=void\ sortItemList()
comment28.text=\r\n\ This\ method\ will\ sort\ the\ item\ list,\ based\ on\ the\ item\ ID.\r\n
comment29.params=o1\ o2
comment29.target=int\ compare(Item,\ Item)
comment3.params=items
comment3.target=java.lang.String\ getFormattedItemList(java.util.ArrayList)
comment3.text=\r\n\ Private\ method\ getFormattedItemList\ used\ as\ an\ auxiliary\ method\ to\ return\ a\ given\ ArrayList\r\n\ of\ items\ in\ a\ formatted\ manner.\r\n\r\n\ @param\ items\ the\ item\ list\ to\ be\ displayed.\r\n\ @return\ a\ formatted\ String\ representation\ of\ all\ the\ items\ in\ the\ list\ give\ as\ a\ parameter.\r\n
comment30.params=
comment30.target=void\ sortUserList()
comment30.text=\r\n\ This\ method\ will\ sort\ the\ user\ list,\ based\ on\ the\ user\ ID.\r\n
comment31.params=o1\ o2
comment31.target=int\ compare(User,\ User)
comment32.params=
comment32.target=int\ getItemListSize()
comment4.params=
comment4.target=java.lang.String\ getAllUsersFormatted()
comment4.text=\r\n\ Method\ getAllItemsFormatted\ returns\ the\ current\ list\ of\ users\ in\ the\ Arraylist\ in\r\n\ no\ particular\ order.\r\n\r\n\ @return\ a\ formatted\ String\ representation\ of\ all\ the\ users\ in\ userList.\r\n
comment5.params=users
comment5.target=java.lang.String\ getFormattedUserList(java.util.ArrayList)
comment5.text=\r\n\ Private\ method\ getFormattedUserList\ used\ as\ an\ auxiliary\ method\ to\ return\ a\ given\ ArrayList\r\n\ of\ users\ in\ a\ formatted\ manner.\r\n\r\n\ @param\ users\ the\ user\ list\ to\ be\ displayed.\r\n\ @return\ a\ formatted\ String\ representation\ of\ all\ the\ users\ in\ the\ list\ give\ as\ a\ parameter.\r\n
comment6.params=
comment6.target=java.lang.String\ getAllTransactionsFormatted()
comment6.text=\r\n\ Method\ getAllTransactionsFormatted\ returns\ the\ current\ list\ of\ transactions\ in\ the\ Arraylist\ in\r\n\ no\ particular\ order.\r\n\r\n\ @return\ a\ formatted\ String\ representation\ of\ all\ the\ transactions\ in\ transactionList.\r\n
comment7.params=transactions
comment7.target=java.lang.String\ getFormattedTransactionList(java.util.ArrayList)
comment7.text=\r\n\ Private\ method\ getFormattedTransactionList\ used\ as\ an\ auxiliary\ method\ to\ return\ a\ given\ ArrayList\r\n\ of\ items\ in\ a\ formatted\ manner.\r\n\r\n\ @param\ transactions\ the\ transaction\ list\ to\ be\ displayed.\r\n\ @return\ a\ formatted\ String\ representation\ of\ all\ the\ items\ in\ the\ list\ give\ as\ a\ parameter.\r\n
comment8.params=idNumber\ name\ quantity\ price\ category
comment8.target=void\ addNewSmallHardwareItem(java.lang.String,\ java.lang.String,\ int,\ float,\ java.lang.String)
comment8.text=\r\n\ This\ method\ is\ used\ to\ add\ a\ small\ hardware\ item\ to\ the\ itemList\ ArrayList.\r\n\r\n\ @param\ idNumber\ a\ <CODE>String</CODE>\ representing\ the\ ID\ number\ of\ item\r\n\ @param\ name\ a\ <CODE>String</CODE>\ representing\ the\ name\ of\ item\r\n\ @param\ quantity\ an\ <CODE>int</CODE>\ representing\ the\ quantity\ of\ item\r\n\ @param\ price\ a\ <CODE>float</CODE>\ representing\ the\ price\ of\ item\r\n\ @param\ category\ a\ <CODE>String</CODE>\ representing\ the\ category\ of\ item\r\n
comment9.params=idNumber\ name\ quantity\ price\ brand\ type
comment9.target=void\ addNewAppliance(java.lang.String,\ java.lang.String,\ int,\ float,\ java.lang.String,\ java.lang.String)
comment9.text=\r\n\ This\ method\ is\ used\ to\ add\ an\ appliance\ to\ the\ itemList\ ArrayList.\r\n\r\n\ @param\ idNumber\ a\ <CODE>String</CODE>\ representing\ the\ ID\ number\ of\ item\r\n\ @param\ name\ a\ <CODE>String</CODE>\ representing\ the\ name\ of\ item\r\n\ @param\ quantity\ an\ <CODE>int</CODE>\ representing\ the\ quantity\ of\ item\r\n\ @param\ price\ a\ <CODE>float</CODE>\ representing\ the\ price\ of\ item\r\n\ @param\ brand\ a\ <CODE>String</CODE>\ representing\ the\ brand\ of\ item\r\n\ @param\ type\ a\ <CODE>String</CODE>\ representing\ the\ type\ of\ item\r\n
numComments=33
